// This code is auto-generated by Segment Typewriter. Do not edit.
package com.segment.analytics;

import android.support.annotation.NonNull;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class Product extends PropertiesSerializable {
    private Properties properties;

    private Product(Properties properties) {
        this.properties = properties;
    }

    protected Properties toProperties() {
        return properties;
    }

    /**
     * Builder for {@link Product}
     */
    public static class Builder {
        private static String BRAND_KEY = "brand";
        private static String CATEGORY_KEY = "category";
        private static String COUPON_KEY = "coupon";
        private static String IMAGE_URL_KEY = "image_url";
        private static String NAME_KEY = "name";
        private static String POSITION_KEY = "position";
        private static String PRICE_KEY = "price";
        private static String PRODUCT_ID_KEY = "product_id";
        private static String QUANTITY_KEY = "quantity";
        private static String SKU_KEY = "sku";
        private static String URL_KEY = "url";
        private static String VARIANT_KEY = "variant";

        private Properties properties;

        /**
         * Builder for {@link Product}
         */
        public Builder() {
            properties = new Properties();
        }

        /**
         * Brand associated with the product
         * This property is optional and not required to generate a valid Product object
         */
        public Builder brand(final @NonNull String brand) {
            properties.putValue(BRAND_KEY, brand);
            return this;
        }

        /**
         * Product category being viewed
         * This property is optional and not required to generate a valid Product object
         */
        public Builder category(final @NonNull String category) {
            properties.putValue(CATEGORY_KEY, category);
            return this;
        }

        /**
         * Coupon code associated with a product (e.g MAY_DEALS_3)
         * This property is optional and not required to generate a valid Product object
         */
        public Builder coupon(final @NonNull String coupon) {
            properties.putValue(COUPON_KEY, coupon);
            return this;
        }

        /**
         * Image url of the product
         * This property is optional and not required to generate a valid Product object
         */
        public Builder imageURL(final @NonNull String imageURL) {
            properties.putValue(IMAGE_URL_KEY, imageURL);
            return this;
        }

        /**
         * Name of the product being viewed
         * This property is optional and not required to generate a valid Product object
         */
        public Builder name(final @NonNull String name) {
            properties.putValue(NAME_KEY, name);
            return this;
        }

        /**
         * Position in the product list (ex. 3)
         * This property is optional and not required to generate a valid Product object
         */
        public Builder position(final @NonNull Long position) {
            properties.putValue(POSITION_KEY, position);
            return this;
        }

        /**
         * Price of the product being viewed
         * This property is optional and not required to generate a valid Product object
         */
        public Builder price(final @NonNull Double price) {
            properties.putValue(PRICE_KEY, price);
            return this;
        }

        /**
         * Database id of the product being viewed
         * This property is optional and not required to generate a valid Product object
         */
        public Builder productID(final @NonNull String productID) {
            properties.putValue(PRODUCT_ID_KEY, productID);
            return this;
        }

        /**
         * Quantity of a product
         * This property is optional and not required to generate a valid Product object
         */
        public Builder quantity(final @NonNull Double quantity) {
            properties.putValue(QUANTITY_KEY, quantity);
            return this;
        }

        /**
         * Sku of the product being viewed
         * This property is optional and not required to generate a valid Product object
         */
        public Builder sku(final @NonNull String sku) {
            properties.putValue(SKU_KEY, sku);
            return this;
        }

        /**
         * URL of the product page
         * This property is optional and not required to generate a valid Product object
         */
        public Builder url(final @NonNull String url) {
            properties.putValue(URL_KEY, url);
            return this;
        }

        /**
         * Variant of the product (e.g. Black)
         * This property is optional and not required to generate a valid Product object
         */
        public Builder variant(final @NonNull String variant) {
            properties.putValue(VARIANT_KEY, variant);
            return this;
        }

        /**
         * Build an instance of {@link Product}
         */
        public Product build() {
            return new Product(properties);
        }
    }
}
