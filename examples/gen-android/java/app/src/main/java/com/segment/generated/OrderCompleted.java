// This code is auto-generated by Segment Typewriter. Do not edit.
package com.segment.generated;

import java.util.*;
import com.segment.analytics.Properties;
import androidx.annotation.NonNull;

public final class OrderCompleted {
    private Properties properties;

    private OrderCompleted(Properties properties) {
        this.properties = properties;
    }

    protected Properties toProperties() {
        return properties;
    }

    /**
     * Builder for {@link OrderCompleted}
     */
    public static class Builder {
        private Properties properties;

        /**
         * Builder for {@link OrderCompleted}
         */
        public Builder() {
            properties = new Properties();
        }

        /**
         * Store or affiliation from which this transaction occurred (e.g. Google Store)
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder affiliation(final @NonNull String affiliation) {
            properties.putValue("affiliation", affiliation);
            return this;
        }

        /**
         * Checkout ID
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder checkoutID(final @NonNull String checkoutID) {
            properties.putValue("checkout_id", checkoutID);
            return this;
        }

        /**
         * Transaction coupon redeemed with the transaction
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder coupon(final @NonNull String coupon) {
            properties.putValue("coupon", coupon);
            return this;
        }

        /**
         * Currency code associated with the transaction
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder currency(final @NonNull String currency) {
            properties.putValue("currency", currency);
            return this;
        }

        /**
         * Total discount associated with the transaction
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder discount(final @NonNull Double discount) {
            properties.putValue("discount", discount);
            return this;
        }

        /**
         * Order/transaction ID
         * This property is required to generate a valid OrderCompleted object
         */
        public Builder orderID(final @NonNull String orderID) {
            properties.putValue("order_id", orderID);
            return this;
        }

        /**
         * Products in the order
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder products(final @NonNull List<Product> products) {
            List<Properties> p = new ArrayList<>();
            for (Product elem : products) {
                p.add(elem.toProperties());
            }
            properties.putValue("products", p);
            return this;
        }

        /**
         * Revenue associated with the transaction (excluding shipping and tax)
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder revenue(final @NonNull Double revenue) {
            properties.putValue("revenue", revenue);
            return this;
        }

        /**
         * Shipping cost associated with the transaction
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder shipping(final @NonNull Double shipping) {
            properties.putValue("shipping", shipping);
            return this;
        }

        /**
         * Total tax associated with the transaction
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder tax(final @NonNull Double tax) {
            properties.putValue("tax", tax);
            return this;
        }

        /**
         * Revenue with discounts and coupons added in. Note that our Google Analytics Ecommerce
         * destination accepts total or revenue, but not both. For better flexibility and total
         * control over tracking, we let you decide how to calculate how coupons and discounts are
         * applied
         * This property is optional and not required to generate a valid OrderCompleted object
         */
        public Builder total(final @NonNull Double total) {
            properties.putValue("total", total);
            return this;
        }

        /**
         * Build an instance of {@link OrderCompleted}
         * Performs runtime validation on the following required properties:
         *  - orderID
         */
        public OrderCompleted build() {
            if (properties.get("order_id") == null) {
                throw new IllegalArgumentException("OrderCompleted missing required property: orderID");
            }

            return new OrderCompleted(properties);
        }
    }
}
