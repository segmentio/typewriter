/**
* This client was automatically generated by Segment Typewriter. ** Do Not Edit **
*/
package com.segment.generated;

import java.util.*;
import com.segment.analytics.Properties;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public final class EveryNullableOptionalType extends SerializableProperties {
  private Properties properties;

  
  private EveryNullableOptionalType(Properties properties) {
    this.properties = properties;
	}

  protected Properties toProperties() {
    return properties;
	}
  

  /**
  * Builder for {@link EveryNullableOptionalType}
  */
  public static class Builder {
    private Properties properties;

    /**
    * Builder for {@link EveryNullableOptionalType}
    */
    public Builder() {
      properties = new Properties();
    }


    /**
     * Optional any property
     */
    public Builder optionalAny(final @Nullable Object optionalAny) {
      properties.putValue("optional any", optionalAny);
      return this;
    } 
    

    /**
     * Optional array property
     */
    public Builder optionalArray(final @Nullable List<Object> optionalArray) {
      List<?> p = TypewriterUtils.serialize(optionalArray);
      properties.putValue("optional array", p);
      return this;
    } 
    

    /**
     * Optional array with properties
     */
    public Builder optionalArrayWithProperties(final @Nullable List<OptionalArrayWithPropertiesItem> optionalArrayWithProperties) {
      List<?> p = TypewriterUtils.serialize(optionalArrayWithProperties);
      properties.putValue("optional array with properties", p);
      return this;
    } 
    

    /**
     * Optional boolean property
     */
    public Builder optionalBoolean(final @Nullable Boolean optionalBoolean) {
      properties.putValue("optional boolean", optionalBoolean);
      return this;
    } 
    

    /**
     * Optional integer property
     */
    public Builder optionalInt(final @Nullable Long optionalInt) {
      properties.putValue("optional int", optionalInt);
      return this;
    } 
    

    /**
     * Optional number property
     */
    public Builder optionalNumber(final @Nullable Double optionalNumber) {
      properties.putValue("optional number", optionalNumber);
      return this;
    } 
    

    /**
     * Optional object property
     */
    public Builder optionalObject(final @Nullable Object optionalObject) {
      properties.putValue("optional object", optionalObject);
      return this;
    } 
    

    /**
     * Optional object with properties
     */
    public Builder optionalObjectWithProperties(final @Nullable OptionalObjectWithProperties optionalObjectWithProperties) {
      if(optionalObjectWithProperties instanceof SerializableProperties){
        properties.putValue("optional object with properties", ((SerializableProperties) optionalObjectWithProperties).toProperties());
      }else{
        properties.putValue("optional object with properties", optionalObjectWithProperties);
      }
      return this;
    } 
    

    /**
     * Optional string property
     */
    public Builder optionalString(final @Nullable String optionalString) {
      properties.putValue("optional string", optionalString);
      return this;
    } 
    

    /**
     * Optional string property with a regex conditional
     */
    public Builder optionalStringWithRegex(final @Nullable String optionalStringWithRegex) {
      properties.putValue("optional string with regex", optionalStringWithRegex);
      return this;
    } 
    

    /**
    * Build an instance of {@link EveryNullableOptionalType}
    */
    public EveryNullableOptionalType build() {
      return new EveryNullableOptionalType(properties);
    }
  }
}