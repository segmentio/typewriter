/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

#if canImport(Segment)
import Segment
#elseif canImport(Analytics)
import Analytics
#endif

class TypewriterAnalytics {
    static func I42TerribleEventName3() {
        TypewriterAnalytics.I42TerribleEventName3(options: [:])
    }

    static func I42TerribleEventName3(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("42_--terrible==\\\"event'++name~!3", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func analyticsInstanceMissing() {
        TypewriterAnalytics.analyticsInstanceMissing(options: [:])
    }

    static func analyticsInstanceMissing(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Analytics Instance Missing", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func analyticsInstanceMissingThrewError() {
        TypewriterAnalytics.analyticsInstanceMissingThrewError(options: [:])
    }

    static func analyticsInstanceMissingThrewError(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Analytics Instance Missing Threw Error", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func customViolationHandler(regexProperty: String) {
        TypewriterAnalytics.customViolationHandler(regexProperty: regexProperty, options: [:])
    }

    static func customViolationHandler(regexProperty: String, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["regex property"] = regexProperty;

        Analytics.shared().track("Custom Violation Handler", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func customViolationHandlerCalled() {
        TypewriterAnalytics.customViolationHandlerCalled(options: [:])
    }

    static func customViolationHandlerCalled(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Custom Violation Handler Called", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func defaultViolationHandler(regexProperty: String) {
        TypewriterAnalytics.defaultViolationHandler(regexProperty: regexProperty, options: [:])
    }

    static func defaultViolationHandler(regexProperty: String, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["regex property"] = regexProperty;

        Analytics.shared().track("Default Violation Handler", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func defaultViolationHandlerCalled() {
        TypewriterAnalytics.defaultViolationHandlerCalled(options: [:])
    }

    static func defaultViolationHandlerCalled(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Default Violation Handler Called", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func emptyEvent() {
        TypewriterAnalytics.emptyEvent(options: [:])
    }

    static func emptyEvent(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Empty Event", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func enumTypes(stringConst: String?, stringEnum: String?) {
        TypewriterAnalytics.enumTypes(stringConst: stringConst, stringEnum: stringEnum, options: [:])
    }

    static func enumTypes(stringConst: String?, stringEnum: String?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["string const"] = stringConst;
    properties["string enum"] = stringEnum;

        Analytics.shared().track("Enum Types", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func eventCollided() {
        TypewriterAnalytics.eventCollided(options: [:])
    }

    static func eventCollided(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("Event Collided", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func everyNullableOptionalType(optionalAny: Any?, optionalArray: [Any]?, optionalArrayWithProperties: [OptionalArrayWithPropertiesItem]?, optionalBoolean: Bool?, optionalInt: Int?, optionalNumber: Decimal?, optionalObject: [String: Any]?, optionalObjectWithProperties: OptionalObjectWithProperties?, optionalString: String?, optionalStringWithRegex: String?) {
        TypewriterAnalytics.everyNullableOptionalType(optionalAny: optionalAny, optionalArray: optionalArray, optionalArrayWithProperties: optionalArrayWithProperties, optionalBoolean: optionalBoolean, optionalInt: optionalInt, optionalNumber: optionalNumber, optionalObject: optionalObject, optionalObjectWithProperties: optionalObjectWithProperties, optionalString: optionalString, optionalStringWithRegex: optionalStringWithRegex, options: [:])
    }

    static func everyNullableOptionalType(optionalAny: Any?, optionalArray: [Any]?, optionalArrayWithProperties: [OptionalArrayWithPropertiesItem]?, optionalBoolean: Bool?, optionalInt: Int?, optionalNumber: Decimal?, optionalObject: [String: Any]?, optionalObjectWithProperties: OptionalObjectWithProperties?, optionalString: String?, optionalStringWithRegex: String?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["optional any"] = optionalAny;
    properties["optional array"] = optionalArray?.serializableArray();
    properties["optional array with properties"] = optionalArrayWithProperties?.serializableArray();
    properties["optional boolean"] = optionalBoolean;
    properties["optional int"] = optionalInt;
    properties["optional number"] = optionalNumber;
    properties["optional object"] = optionalObject;
    properties["optional object with properties"] = optionalObjectWithProperties?.serializableDictionary();
    properties["optional string"] = optionalString;
    properties["optional string with regex"] = optionalStringWithRegex;

        Analytics.shared().track("Every Nullable Optional Type", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func everyNullableRequiredType(requiredAny: Any?, requiredArray: [Any]?, requiredArrayWithProperties: [RequiredArrayWithPropertiesItem]?, requiredBoolean: Bool?, requiredInt: Int?, requiredNumber: Decimal?, requiredObject: [String: Any]?, requiredObjectWithProperties: RequiredObjectWithProperties?, requiredString: String?, requiredStringWithRegex: String?) {
        TypewriterAnalytics.everyNullableRequiredType(requiredAny: requiredAny, requiredArray: requiredArray, requiredArrayWithProperties: requiredArrayWithProperties, requiredBoolean: requiredBoolean, requiredInt: requiredInt, requiredNumber: requiredNumber, requiredObject: requiredObject, requiredObjectWithProperties: requiredObjectWithProperties, requiredString: requiredString, requiredStringWithRegex: requiredStringWithRegex, options: [:])
    }

    static func everyNullableRequiredType(requiredAny: Any?, requiredArray: [Any]?, requiredArrayWithProperties: [RequiredArrayWithPropertiesItem]?, requiredBoolean: Bool?, requiredInt: Int?, requiredNumber: Decimal?, requiredObject: [String: Any]?, requiredObjectWithProperties: RequiredObjectWithProperties?, requiredString: String?, requiredStringWithRegex: String?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["required any"] = requiredAny == nil ? NSNull() : requiredAny
    properties["required array"] = requiredArray == nil ? NSNull() : requiredArray?.serializableArray()
    properties["required array with properties"] = requiredArrayWithProperties == nil ? NSNull() : requiredArrayWithProperties?.serializableArray()
    properties["required boolean"] = requiredBoolean == nil ? NSNull() : requiredBoolean
    properties["required int"] = requiredInt == nil ? NSNull() : requiredInt
    properties["required number"] = requiredNumber == nil ? NSNull() : requiredNumber
    properties["required object"] = requiredObject == nil ? NSNull() : requiredObject
    properties["required object with properties"] = requiredObjectWithProperties == nil ? NSNull() : requiredObjectWithProperties?.serializableDictionary()
    properties["required string"] = requiredString == nil ? NSNull() : requiredString
    properties["required string with regex"] = requiredStringWithRegex == nil ? NSNull() : requiredStringWithRegex

        Analytics.shared().track("Every Nullable Required Type", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func everyOptionalType(optionalAny: Any?, optionalArray: [Any]?, optionalArrayWithProperties: [OptionalArrayWithPropertiesItem1]?, optionalBoolean: Bool?, optionalInt: Int?, optionalNumber: Decimal?, optionalObject: [String: Any]?, optionalObjectWithProperties: OptionalObjectWithProperties1?, optionalString: String?, optionalStringWithRegex: String?) {
        TypewriterAnalytics.everyOptionalType(optionalAny: optionalAny, optionalArray: optionalArray, optionalArrayWithProperties: optionalArrayWithProperties, optionalBoolean: optionalBoolean, optionalInt: optionalInt, optionalNumber: optionalNumber, optionalObject: optionalObject, optionalObjectWithProperties: optionalObjectWithProperties, optionalString: optionalString, optionalStringWithRegex: optionalStringWithRegex, options: [:])
    }

    static func everyOptionalType(optionalAny: Any?, optionalArray: [Any]?, optionalArrayWithProperties: [OptionalArrayWithPropertiesItem1]?, optionalBoolean: Bool?, optionalInt: Int?, optionalNumber: Decimal?, optionalObject: [String: Any]?, optionalObjectWithProperties: OptionalObjectWithProperties1?, optionalString: String?, optionalStringWithRegex: String?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["optional any"] = optionalAny;
    properties["optional array"] = optionalArray?.serializableArray();
    properties["optional array with properties"] = optionalArrayWithProperties?.serializableArray();
    properties["optional boolean"] = optionalBoolean;
    properties["optional int"] = optionalInt;
    properties["optional number"] = optionalNumber;
    properties["optional object"] = optionalObject;
    properties["optional object with properties"] = optionalObjectWithProperties?.serializableDictionary();
    properties["optional string"] = optionalString;
    properties["optional string with regex"] = optionalStringWithRegex;

        Analytics.shared().track("Every Optional Type", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func everyRequiredType(requiredAny: Any?, requiredArray: [Any], requiredArrayWithProperties: [RequiredArrayWithPropertiesItem1], requiredBoolean: Bool, requiredInt: Int, requiredNumber: Decimal, requiredObject: [String: Any], requiredObjectWithProperties: RequiredObjectWithProperties1, requiredString: String, requiredStringWithRegex: String) {
        TypewriterAnalytics.everyRequiredType(requiredAny: requiredAny, requiredArray: requiredArray, requiredArrayWithProperties: requiredArrayWithProperties, requiredBoolean: requiredBoolean, requiredInt: requiredInt, requiredNumber: requiredNumber, requiredObject: requiredObject, requiredObjectWithProperties: requiredObjectWithProperties, requiredString: requiredString, requiredStringWithRegex: requiredStringWithRegex, options: [:])
    }

    static func everyRequiredType(requiredAny: Any?, requiredArray: [Any], requiredArrayWithProperties: [RequiredArrayWithPropertiesItem1], requiredBoolean: Bool, requiredInt: Int, requiredNumber: Decimal, requiredObject: [String: Any], requiredObjectWithProperties: RequiredObjectWithProperties1, requiredString: String, requiredStringWithRegex: String, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["required any"] = requiredAny == nil ? NSNull() : requiredAny
    properties["required array"] = requiredArray.serializableArray();
    properties["required array with properties"] = requiredArrayWithProperties.serializableArray();
    properties["required boolean"] = requiredBoolean;
    properties["required int"] = requiredInt;
    properties["required number"] = requiredNumber;
    properties["required object"] = requiredObject;
    properties["required object with properties"] = requiredObjectWithProperties.serializableDictionary();
    properties["required string"] = requiredString;
    properties["required string with regex"] = requiredStringWithRegex;

        Analytics.shared().track("Every Required Type", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func largeNumbersEvent(largeNullableOptionalInteger: Int?, largeNullableOptionalNumber: Decimal?, largeNullableRequiredInteger: Int?, largeNullableRequiredNumber: Decimal?, largeOptionalInteger: Int?, largeOptionalNumber: Decimal?, largeRequiredInteger: Int, largeRequiredNumber: Decimal) {
        TypewriterAnalytics.largeNumbersEvent(largeNullableOptionalInteger: largeNullableOptionalInteger, largeNullableOptionalNumber: largeNullableOptionalNumber, largeNullableRequiredInteger: largeNullableRequiredInteger, largeNullableRequiredNumber: largeNullableRequiredNumber, largeOptionalInteger: largeOptionalInteger, largeOptionalNumber: largeOptionalNumber, largeRequiredInteger: largeRequiredInteger, largeRequiredNumber: largeRequiredNumber, options: [:])
    }

    static func largeNumbersEvent(largeNullableOptionalInteger: Int?, largeNullableOptionalNumber: Decimal?, largeNullableRequiredInteger: Int?, largeNullableRequiredNumber: Decimal?, largeOptionalInteger: Int?, largeOptionalNumber: Decimal?, largeRequiredInteger: Int, largeRequiredNumber: Decimal, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["large nullable optional integer"] = largeNullableOptionalInteger;
    properties["large nullable optional number"] = largeNullableOptionalNumber;
    properties["large nullable required integer"] = largeNullableRequiredInteger == nil ? NSNull() : largeNullableRequiredInteger
    properties["large nullable required number"] = largeNullableRequiredNumber == nil ? NSNull() : largeNullableRequiredNumber
    properties["large optional integer"] = largeOptionalInteger;
    properties["large optional number"] = largeOptionalNumber;
    properties["large required integer"] = largeRequiredInteger;
    properties["large required number"] = largeRequiredNumber;

        Analytics.shared().track("Large Numbers Event", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func nestedArrays(universeCharacters: [[UniverseCharactersItemItem]]) {
        TypewriterAnalytics.nestedArrays(universeCharacters: universeCharacters, options: [:])
    }

    static func nestedArrays(universeCharacters: [[UniverseCharactersItemItem]], options: [String: Any]?) {
        var properties = [String: Any]()
    properties["universeCharacters"] = universeCharacters.serializableArray();

        Analytics.shared().track("Nested Arrays", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func nestedObjects(garage: Garage) {
        TypewriterAnalytics.nestedObjects(garage: garage, options: [:])
    }

    static func nestedObjects(garage: Garage, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["garage"] = garage.serializableDictionary();

        Analytics.shared().track("Nested Objects", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func propertiesCollided(propertyCollided: String, propertyCollided1: String) {
        TypewriterAnalytics.propertiesCollided(propertyCollided: propertyCollided, propertyCollided1: propertyCollided1, options: [:])
    }

    static func propertiesCollided(propertyCollided: String, propertyCollided1: String, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["Property Collided"] = propertyCollided;
    properties["property_collided"] = propertyCollided1;

        Analytics.shared().track("Properties Collided", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func propertyObjectNameCollision1(universe: Universe?) {
        TypewriterAnalytics.propertyObjectNameCollision1(universe: universe, options: [:])
    }

    static func propertyObjectNameCollision1(universe: Universe?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["universe"] = universe?.serializableDictionary();

        Analytics.shared().track("Property Object Name Collision #1", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func propertyObjectNameCollision2(universe: Universe1?) {
        TypewriterAnalytics.propertyObjectNameCollision2(universe: universe, options: [:])
    }

    static func propertyObjectNameCollision2(universe: Universe1?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["universe"] = universe?.serializableDictionary();

        Analytics.shared().track("Property Object Name Collision #2", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func propertySanitized(I0000TerriblePropertyName3: String) {
        TypewriterAnalytics.propertySanitized(I0000TerriblePropertyName3: I0000TerriblePropertyName3, options: [:])
    }

    static func propertySanitized(I0000TerriblePropertyName3: String, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["0000---terrible-property-name~!3"] = I0000TerriblePropertyName3;

        Analytics.shared().track("Property Sanitized", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func simpleArrayTypes(any: [Any]?, boolean: [Bool]?, integer: [Int]?, nullable: [String]?, number: [Decimal]?, object: [ObjectItem]?, string: [String]?) {
        TypewriterAnalytics.simpleArrayTypes(any: any, boolean: boolean, integer: integer, nullable: nullable, number: number, object: object, string: string, options: [:])
    }

    static func simpleArrayTypes(any: [Any]?, boolean: [Bool]?, integer: [Int]?, nullable: [String]?, number: [Decimal]?, object: [ObjectItem]?, string: [String]?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["any"] = any?.serializableArray();
    properties["boolean"] = boolean?.serializableArray();
    properties["integer"] = integer?.serializableArray();
    properties["nullable"] = nullable?.serializableArray();
    properties["number"] = number?.serializableArray();
    properties["object"] = object?.serializableArray();
    properties["string"] = string?.serializableArray();

        Analytics.shared().track("Simple Array Types", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func unionType(universeName: Any?) {
        TypewriterAnalytics.unionType(universeName: universeName, options: [:])
    }

    static func unionType(universeName: Any?, options: [String: Any]?) {
        var properties = [String: Any]()
    properties["universe_name"] = universeName == nil ? NSNull() : universeName

        Analytics.shared().track("Union Type", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

    static func eventCollided1() {
        TypewriterAnalytics.eventCollided1(options: [:])
    }

    static func eventCollided1(options: [String: Any]?) {
        let properties = [String: Any]()

        Analytics.shared().track("event_collided", properties: properties, options: TypewriterUtils.addContextFields(options));
    }

}
