/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

import Foundation

extension Array {
    func serializableArray() -> [Any] {
        var result = [Any]()
        
        for item in self {
            if let arr = item as? [Any] {
                result.append(arr.serializableArray())
            } else if let obj = item as? TypewriterSerializable {
                result.append(obj.serializableDictionary())
            } else {
                result.append(item)
            }
        }
        return result
    }
}

class TypewriterUtils {
    static func addContextFields(_ options: [String: Any]?) -> [String: Any] {
        var newOptions = (options ?? [String: Any]()) as [String: Any]
        let originalContext = newOptions["context"] as? [String: Any]
        
        let typewriterContext = [
            "typewriter": [
                "language": "swift",
                "version": "7.4.2"
            ]
        ]
        
        var newContext = [String: Any]()
        if let originalContext = originalContext {
            newContext.merge(originalContext) { _,_ in }
        }
        newContext.merge(typewriterContext) { _,_ in }
        newOptions["context"] = newContext
        
        return newOptions
    }
}
