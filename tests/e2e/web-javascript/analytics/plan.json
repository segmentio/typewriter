{
  "create_time": "2019-06-25T22:44:43.000Z",
  "display_name": "Typewriter E2E Testing Tracking Plan",
  "name": "workspaces/segment_prod/tracking-plans/rs_1N9oTnc5O8cv1peY65iXsSPnzGP",
  "rules": {
    "events": [
      {
        "description": "Validates that clients properly sanitize event names.",
        "name": "42_--terrible==\\\"event'++name~!3",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Fired before an analytics instance has been set, which should throw an error.",
        "name": "Analytics Instance Missing",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Fired after a client throws an \"Analytics Instance Missing\" error to mark the test as successful.",
        "name": "Analytics Instance Missing Threw Error",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "This event is fired in order to trigger a custom violation handler. It should be called with a JSON Schema violation.",
        "name": "Custom Violation Handler",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "regex property": {
                  "description": "",
                  "pattern": "Lawyer Morty|Evil Morty",
                  "type": "string"
                }
              },
              "required": ["regex property"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "This event should be fired if a custom violation handler is correctly called due to a call to `Custom Violation Handler` with a violation.",
        "name": "Custom Violation Handler Called",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "This event is fired in order to trigger the default violation handler. It should be called with a JSON Schema violation.",
        "name": "Default Violation Handler",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "regex property": {
                  "description": "",
                  "pattern": "Lawyer Morty|Evil Morty",
                  "type": "string"
                }
              },
              "required": ["regex property"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "This event should be fired if the default violation handler is correctly called due to a call to `Default Violation Handler` with a violation.",
        "name": "Default Violation Handler Called",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that a generated client supports events with no explicit properties. It is expected that this event accepts ANY properties.",
        "name": "Empty Event",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that a generated client handles even naming collisions.",
        "name": "Event Collided",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle all of the supported field types, as nullable optional fields. If a field is null, it is expected to be NOT sent through.",
        "name": "Every Nullable Optional Type",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "optional any": {
                  "description": "Optional any property"
                },
                "optional array": {
                  "description": "Optional array property",
                  "type": ["array", "null"]
                },
                "optional array with properties": {
                  "description": "Optional array with properties",
                  "items": {
                    "properties": {
                      "optional any": {
                        "description": "Optional any property"
                      },
                      "optional array": {
                        "description": "Optional array property",
                        "type": ["array", "null"]
                      },
                      "optional boolean": {
                        "description": "Optional boolean property",
                        "type": ["boolean", "null"]
                      },
                      "optional int": {
                        "description": "Optional integer property",
                        "type": ["integer", "null"]
                      },
                      "optional number": {
                        "description": "Optional number property",
                        "type": ["number", "null"]
                      },
                      "optional object": {
                        "description": "Optional object property",
                        "properties": {},
                        "required": [],
                        "type": ["object", "null"]
                      },
                      "optional string": {
                        "description": "Optional string property",
                        "type": ["string", "null"]
                      },
                      "optional string with regex": {
                        "description": "Optional string property with a regex conditional",
                        "pattern": "Evil Morty|Lawyer Morty",
                        "type": ["string", "null"]
                      }
                    },
                    "type": ["object", "null"]
                  },
                  "type": ["array", "null"]
                },
                "optional boolean": {
                  "description": "Optional boolean property",
                  "type": ["boolean", "null"]
                },
                "optional int": {
                  "description": "Optional integer property",
                  "type": ["integer", "null"]
                },
                "optional number": {
                  "description": "Optional number property",
                  "type": ["number", "null"]
                },
                "optional object": {
                  "description": "Optional object property",
                  "properties": {},
                  "required": [],
                  "type": ["object", "null"]
                },
                "optional object with properties": {
                  "description": "Optional object with properties",
                  "properties": {
                    "optional any": {
                      "description": "Optional any property"
                    },
                    "optional array": {
                      "description": "Optional array property",
                      "type": ["array", "null"]
                    },
                    "optional boolean": {
                      "description": "Optional boolean property",
                      "type": ["boolean", "null"]
                    },
                    "optional int": {
                      "description": "Optional integer property",
                      "type": ["integer", "null"]
                    },
                    "optional number": {
                      "description": "Optional number property",
                      "type": ["number", "null"]
                    },
                    "optional object": {
                      "description": "Optional object property",
                      "properties": {},
                      "required": [],
                      "type": ["object", "null"]
                    },
                    "optional string": {
                      "description": "Optional string property",
                      "type": ["string", "null"]
                    },
                    "optional string with regex": {
                      "description": "Optional string property with a regex conditional",
                      "pattern": "Evil Morty|Lawyer Morty",
                      "type": ["string", "null"]
                    }
                  },
                  "required": [],
                  "type": ["object", "null"]
                },
                "optional string": {
                  "description": "Optional string property",
                  "type": ["string", "null"]
                },
                "optional string with regex": {
                  "description": "Optional string property with a regex conditional",
                  "pattern": "Evil Morty|Lawyer Morty",
                  "type": ["string", "null"]
                }
              },
              "type": "object"
            },
            "traits": {}
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle all of the supported field types, as nullable required fields. If a field is null, it is expected to be sent through.",
        "name": "Every Nullable Required Type",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "required any": {
                  "description": "Required any property"
                },
                "required array": {
                  "description": "Required array property",
                  "type": ["array", "null"]
                },
                "required array with properties": {
                  "description": "Required array with properties",
                  "items": {
                    "properties": {
                      "required any": {
                        "description": "Required any property"
                      },
                      "required array": {
                        "description": "Required array property",
                        "type": ["array", "null"]
                      },
                      "required boolean": {
                        "description": "Required boolean property",
                        "type": ["boolean", "null"]
                      },
                      "required int": {
                        "description": "Required integer property",
                        "type": ["integer", "null"]
                      },
                      "required number": {
                        "description": "Required number property",
                        "type": ["number", "null"]
                      },
                      "required object": {
                        "description": "Required object property",
                        "properties": {},
                        "required": [],
                        "type": ["object", "null"]
                      },
                      "required string": {
                        "description": "Required string property",
                        "type": ["string", "null"]
                      },
                      "required string with regex": {
                        "description": "Required string property with a regex conditional",
                        "pattern": "Evil Morty|Lawyer Morty",
                        "type": ["string", "null"]
                      }
                    },
                    "required": [
                      "required any",
                      "required array",
                      "required boolean",
                      "required int",
                      "required number",
                      "required object",
                      "required string",
                      "required string with regex"
                    ],
                    "type": ["object", "null"]
                  },
                  "type": ["array", "null"]
                },
                "required boolean": {
                  "description": "Required boolean property",
                  "type": ["boolean", "null"]
                },
                "required int": {
                  "description": "Required integer property",
                  "type": ["integer", "null"]
                },
                "required number": {
                  "description": "Required number property",
                  "type": ["number", "null"]
                },
                "required object": {
                  "description": "Required object property",
                  "properties": {},
                  "required": [],
                  "type": ["object", "null"]
                },
                "required object with properties": {
                  "description": "Required object with properties",
                  "properties": {
                    "required any": {
                      "description": "Required any property"
                    },
                    "required array": {
                      "description": "Required array property",
                      "type": ["array", "null"]
                    },
                    "required boolean": {
                      "description": "Required boolean property",
                      "type": ["boolean", "null"]
                    },
                    "required int": {
                      "description": "Required integer property",
                      "type": ["integer", "null"]
                    },
                    "required number": {
                      "description": "Required number property",
                      "type": ["number", "null"]
                    },
                    "required object": {
                      "description": "Required object property",
                      "properties": {},
                      "required": [],
                      "type": ["object", "null"]
                    },
                    "required string": {
                      "description": "Required string property",
                      "type": ["string", "null"]
                    },
                    "required string with regex": {
                      "description": "Required string property with a regex conditional",
                      "pattern": "Evil Morty|Lawyer Morty",
                      "type": ["string", "null"]
                    }
                  },
                  "required": [
                    "required any",
                    "required array",
                    "required boolean",
                    "required int",
                    "required number",
                    "required object",
                    "required string",
                    "required string with regex"
                  ],
                  "type": ["object", "null"]
                },
                "required string": {
                  "description": "Required string property",
                  "type": ["string", "null"]
                },
                "required string with regex": {
                  "description": "Required string property with a regex conditional",
                  "pattern": "Evil Morty|Lawyer Morty",
                  "type": ["string", "null"]
                }
              },
              "required": [
                "required any",
                "required array",
                "required boolean",
                "required int",
                "required number",
                "required object",
                "required string",
                "required string with regex",
                "required object with properties",
                "required array with properties"
              ],
              "type": "object"
            },
            "traits": {}
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle all of the supported field types, as optional fields.",
        "name": "Every Optional Type",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "optional any": {
                  "description": "Optional any property"
                },
                "optional array": {
                  "description": "Optional array property",
                  "type": "array"
                },
                "optional array with properties": {
                  "description": "Optional array with properties",
                  "items": {
                    "properties": {
                      "optional any": {
                        "description": "Optional any property"
                      },
                      "optional array": {
                        "description": "Optional array property",
                        "type": "array"
                      },
                      "optional boolean": {
                        "description": "Optional boolean property",
                        "type": "boolean"
                      },
                      "optional int": {
                        "description": "Optional integer property",
                        "type": "integer"
                      },
                      "optional number": {
                        "description": "Optional number property",
                        "type": "number"
                      },
                      "optional object": {
                        "description": "Optional object property",
                        "key": "optional object",
                        "properties": {},
                        "type": "object"
                      },
                      "optional string": {
                        "description": "Optional string property",
                        "type": "string"
                      },
                      "optional string with regex": {
                        "description": "Optional string property with a regex conditional",
                        "pattern": "Evil Morty|Lawyer Morty",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "optional boolean": {
                  "description": "Optional boolean property",
                  "type": "boolean"
                },
                "optional int": {
                  "description": "Optional integer property",
                  "type": "integer"
                },
                "optional number": {
                  "description": "Optional number property",
                  "type": "number"
                },
                "optional object": {
                  "description": "Optional object property",
                  "key": "optional object",
                  "properties": {},
                  "type": "object"
                },
                "optional object with properties": {
                  "description": "Optional object with properties",
                  "properties": {
                    "optional any": {
                      "description": "Optional any property"
                    },
                    "optional array": {
                      "description": "Optional array property",
                      "type": "array"
                    },
                    "optional boolean": {
                      "description": "Optional boolean property",
                      "type": "boolean"
                    },
                    "optional int": {
                      "description": "Optional integer property",
                      "type": "integer"
                    },
                    "optional number": {
                      "description": "Optional number property",
                      "type": "number"
                    },
                    "optional object": {
                      "description": "Optional object property",
                      "key": "optional object",
                      "properties": {},
                      "type": "object"
                    },
                    "optional string": {
                      "description": "Optional string property",
                      "type": "string"
                    },
                    "optional string with regex": {
                      "description": "Optional string property with a regex conditional",
                      "pattern": "Evil Morty|Lawyer Morty",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "optional string": {
                  "description": "Optional string property",
                  "type": "string"
                },
                "optional string with regex": {
                  "description": "Optional string property with a regex conditional",
                  "pattern": "Evil Morty|Lawyer Morty",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "traits": {}
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle all of the supported field types, as required fields. ",
        "name": "Every Required Type",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "required any": {
                  "description": "Required any property"
                },
                "required array": {
                  "description": "Required array property",
                  "type": "array"
                },
                "required array with properties": {
                  "description": "Required array with properties",
                  "items": {
                    "properties": {
                      "required any": {
                        "description": "Required any property"
                      },
                      "required array": {
                        "description": "Required array property",
                        "type": "array"
                      },
                      "required boolean": {
                        "description": "Required boolean property",
                        "type": "boolean"
                      },
                      "required int": {
                        "description": "Required integer property",
                        "type": "integer"
                      },
                      "required number": {
                        "description": "Required number property",
                        "type": "number"
                      },
                      "required object": {
                        "description": "Required object property",
                        "key": "required object",
                        "properties": {},
                        "required": [],
                        "type": "object"
                      },
                      "required string": {
                        "description": "Required string property",
                        "type": "string"
                      },
                      "required string with regex": {
                        "description": "Required string property with a regex conditional",
                        "pattern": "Evil Morty|Lawyer Morty",
                        "type": "string"
                      }
                    },
                    "required": [
                      "required any",
                      "required array",
                      "required boolean",
                      "required int",
                      "required number",
                      "required object",
                      "required string",
                      "required string with regex"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "required boolean": {
                  "description": "Required boolean property",
                  "type": "boolean"
                },
                "required int": {
                  "description": "Required integer property",
                  "type": "integer"
                },
                "required number": {
                  "description": "Required number property",
                  "type": "number"
                },
                "required object": {
                  "description": "Required object property",
                  "key": "required object",
                  "properties": {},
                  "required": [],
                  "type": "object"
                },
                "required object with properties": {
                  "description": "Required object with properties",
                  "properties": {
                    "required any": {
                      "description": "Required any property"
                    },
                    "required array": {
                      "description": "Required array property",
                      "type": "array"
                    },
                    "required boolean": {
                      "description": "Required boolean property",
                      "type": "boolean"
                    },
                    "required int": {
                      "description": "Required integer property",
                      "type": "integer"
                    },
                    "required number": {
                      "description": "Required number property",
                      "type": "number"
                    },
                    "required object": {
                      "description": "Required object property",
                      "key": "required object",
                      "properties": {},
                      "required": [],
                      "type": "object"
                    },
                    "required string": {
                      "description": "Required string property",
                      "type": "string"
                    },
                    "required string with regex": {
                      "description": "Required string property with a regex conditional",
                      "pattern": "Evil Morty|Lawyer Morty",
                      "type": "string"
                    }
                  },
                  "required": [
                    "required any",
                    "required array",
                    "required boolean",
                    "required int",
                    "required number",
                    "required object",
                    "required string",
                    "required string with regex"
                  ],
                  "type": "object"
                },
                "required string": {
                  "description": "Required string property",
                  "type": "string"
                },
                "required string with regex": {
                  "description": "Required string property with a regex conditional",
                  "pattern": "Evil Morty|Lawyer Morty",
                  "type": "string"
                }
              },
              "required": [
                "required any",
                "required array",
                "required boolean",
                "required int",
                "required number",
                "required object",
                "required string",
                "required string with regex",
                "required object with properties",
                "required array with properties"
              ],
              "type": "object"
            },
            "traits": {}
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients correctly serialize large numbers (integers and floats).",
        "name": "Large Numbers Event",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "large nullable optional integer": {
                  "description": "",
                  "type": ["integer", "null"]
                },
                "large nullable optional number": {
                  "description": "",
                  "type": ["number", "null"]
                },
                "large nullable required integer": {
                  "description": "",
                  "type": ["integer", "null"]
                },
                "large nullable required number": {
                  "description": "",
                  "type": ["number", "null"]
                },
                "large optional integer": {
                  "description": "",
                  "type": "integer"
                },
                "large optional number": {
                  "description": "",
                  "type": "number"
                },
                "large required integer": {
                  "description": "",
                  "type": "integer"
                },
                "large required number": {
                  "description": "",
                  "type": "number"
                }
              },
              "required": [
                "large required integer",
                "large required number",
                "large nullable required integer",
                "large nullable required number"
              ],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle arrays-within-arrays.",
        "name": "Nested Arrays",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "universeCharacters": {
                  "description": "All known characters from each universe.",
                  "items": {
                    "description": "",
                    "items": {
                      "description": "",
                      "properties": {
                        "name": {
                          "description": "The character's name.",
                          "type": "string"
                        }
                      },
                      "required": ["name"],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "type": "array"
                }
              },
              "required": ["universeCharacters"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle objects-within-objects.",
        "name": "Nested Objects",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "garage": {
                  "description": "",
                  "properties": {
                    "tunnel": {
                      "description": "",
                      "properties": {
                        "subterranean lab": {
                          "description": "",
                          "properties": {
                            "jerry's memories": {
                              "description": "",
                              "type": "array"
                            },
                            "morty's memories": {
                              "description": "",
                              "type": "array"
                            },
                            "summer's contingency plan": {
                              "description": "",
                              "type": "string"
                            }
                          },
                          "required": [],
                          "type": "object"
                        }
                      },
                      "required": ["subterranean lab"],
                      "type": "object"
                    }
                  },
                  "required": ["tunnel"],
                  "type": "object"
                }
              },
              "required": ["garage"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle collisions in property names within a single event.",
        "name": "Properties Collided",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "Property Collided": {
                  "description": "",
                  "type": "string"
                },
                "property_collided": {
                  "description": "",
                  "type": "string"
                }
              },
              "required": ["property_collided", "Property Collided"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle collisions in object names across multiple events.",
        "name": "Property Object Name Collision #1",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "universe": {
                  "description": "",
                  "properties": {
                    "name": {
                      "description": "The common name of this universe.",
                      "type": "string"
                    },
                    "occupants": {
                      "description": "The most important occupants in this universe.",
                      "items": {
                        "description": "",
                        "properties": {
                          "name": {
                            "description": "The name of this occupant.",
                            "type": "string"
                          }
                        },
                        "required": ["name"],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": ["name", "occupants"],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients handle collisions in object names across multiple events.",
        "name": "Property Object Name Collision #2",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "universe": {
                  "description": "",
                  "properties": {
                    "name": {
                      "description": "The common name of this universe.",
                      "type": "string"
                    },
                    "occupants": {
                      "description": "The most important occupants in this universe.",
                      "items": {
                        "description": "",
                        "properties": {
                          "name": {
                            "description": "The name of this occupant.",
                            "type": "string"
                          }
                        },
                        "required": ["name"],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": ["name", "occupants"],
                  "type": "object"
                }
              },
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients sanitize property names that contain invalid identifier characters.",
        "name": "Property Sanitized",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "0000---terrible-property-name~!3": {
                  "description": "",
                  "type": "string"
                }
              },
              "required": ["0000---terrible-property-name~!3"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients support fields with various types of arrays.",
        "name": "Simple Array Types",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "any": {
                  "description": "",
                  "items": {
                    "description": ""
                  },
                  "type": "array"
                },
                "boolean": {
                  "description": "",
                  "items": {
                    "description": "",
                    "type": "boolean"
                  },
                  "type": "array"
                },
                "integer": {
                  "description": "",
                  "items": {
                    "description": "",
                    "type": "integer"
                  },
                  "type": "array"
                },
                "nullable": {
                  "description": "",
                  "items": {
                    "description": "",
                    "type": ["string", "null"]
                  },
                  "type": "array"
                },
                "number": {
                  "description": "",
                  "items": {
                    "description": "",
                    "type": "number"
                  },
                  "type": "array"
                },
                "object": {
                  "description": "",
                  "items": {
                    "description": "",
                    "properties": {
                      "name": {
                        "description": "",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "string": {
                  "description": "",
                  "items": {
                    "description": "",
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that clients support fields with multiple (union) types.",
        "name": "Union Type",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "properties": {
                "universe_name": {
                  "description": "",
                  "type": ["string", "null", "integer"]
                }
              },
              "required": ["universe_name"],
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "required": ["properties"],
          "type": "object"
        },
        "version": 1
      },
      {
        "description": "Validates that a generated client handles even naming collisions.",
        "name": "event_collided",
        "rules": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "labels": {},
          "properties": {
            "context": {},
            "properties": {
              "type": "object"
            },
            "traits": {
              "type": "object"
            }
          },
          "type": "object"
        },
        "version": 1
      }
    ],
    "group_traits": [],
    "identify_traits": []
  },
  "update_time": "2019-12-05T01:01:39.000Z"
}
