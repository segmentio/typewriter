// This code is auto-generated by Segment Typewriter. Do not edit.
package com.segment.analytics;

import android.support.annotation.NonNull;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class ExampleEvent extends PropertiesSerializable {
    private Properties properties;

    private ExampleEvent(Properties properties) {
        this.properties = properties;
    }

    protected Properties toProperties() {
        return properties;
    }

    /**
     * Builder for {@link ExampleEvent}
     */
    public static class Builder {
        private static String OPTIONAL_ANY_KEY = "optional any";
        private static String OPTIONAL_ARRAY_KEY = "optional array";
        private static String OPTIONAL_ARRAY_EMPTY_KEY = "optional array (empty)";
        private static String OPTIONAL_BOOLEAN_KEY = "optional boolean";
        private static String OPTIONAL_INT_KEY = "optional int";
        private static String OPTIONAL_NUMBER_KEY = "optional number";
        private static String OPTIONAL_OBJECT_KEY = "optional object";
        private static String OPTIONAL_OBJECT_EMPTY_KEY = "optional object (empty)";
        private static String OPTIONAL_STRING_KEY = "optional string";
        private static String OPTIONAL_STRING_REGEX_KEY = "optional string regex";
        private static String REQUIRED_ANY_KEY = "required any";
        private static String REQUIRED_ARRAY_KEY = "required array";
        private static String REQUIRED_ARRAY_EMPTY_KEY = "required array (empty)";
        private static String REQUIRED_BOOLEAN_KEY = "required boolean";
        private static String REQUIRED_INT_KEY = "required int";
        private static String REQUIRED_NUMBER_KEY = "required number";
        private static String REQUIRED_OBJECT_KEY = "required object";
        private static String REQUIRED_OBJECT_EMPTY_KEY = "required object (empty)";
        private static String REQUIRED_STRING_KEY = "required string";
        private static String REQUIRED_STRING_REGEX_KEY = "required string regex";

        private Properties properties;

        /**
         * Builder for {@link ExampleEvent}
         */
        public Builder() {
            properties = new Properties();
        }

        /**
         * Optional any property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalAny(final @NonNull Object optionalAny) {
            properties.putValue(OPTIONAL_ANY_KEY, optionalAny);
            return this;
        }

        /**
         * Optional array property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalArray(final @NonNull List<OptionalArray> optionalArray) {
            properties.putValue(OPTIONAL_ARRAY_KEY, PropertiesSerializable.toPropertyList(optionalArray));
            return this;
        }

        /**
         * Optional array (empty) property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalArrayEmpty(final @NonNull List<Object> optionalArrayEmpty) {
            properties.putValue(OPTIONAL_ARRAY_EMPTY_KEY, PropertiesSerializable.toPropertyList(optionalArrayEmpty));
            return this;
        }

        /**
         * Optional boolean property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalBoolean(final @NonNull Boolean optionalBoolean) {
            properties.putValue(OPTIONAL_BOOLEAN_KEY, optionalBoolean);
            return this;
        }

        /**
         * Optional integer property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalInt(final @NonNull Long optionalInt) {
            properties.putValue(OPTIONAL_INT_KEY, optionalInt);
            return this;
        }

        /**
         * Optional number property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalNumber(final @NonNull Double optionalNumber) {
            properties.putValue(OPTIONAL_NUMBER_KEY, optionalNumber);
            return this;
        }

        /**
         * Optional object property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalObject(final @NonNull OptionalObject optionalObject) {
            properties.putValue(OPTIONAL_OBJECT_KEY, optionalObject);
            return this;
        }

        /**
         * Optional object (empty) property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalObjectEmpty(final @NonNull Map<String, Object> optionalObjectEmpty) {
            properties.putValue(OPTIONAL_OBJECT_EMPTY_KEY, optionalObjectEmpty);
            return this;
        }

        /**
         * Optional string property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalString(final @NonNull String optionalString) {
            properties.putValue(OPTIONAL_STRING_KEY, optionalString);
            return this;
        }

        /**
         * Optional string regex property
         * This property is optional and not required to generate a valid ExampleEvent object
         */
        public Builder optionalStringRegex(final @NonNull String optionalStringRegex) {
            properties.putValue(OPTIONAL_STRING_REGEX_KEY, optionalStringRegex);
            return this;
        }

        /**
         * Required any property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredAny(final @NonNull Object requiredAny) {
            properties.putValue(REQUIRED_ANY_KEY, requiredAny);
            return this;
        }

        /**
         * Required array property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredArray(final @NonNull List<RequiredArray> requiredArray) {
            properties.putValue(REQUIRED_ARRAY_KEY, PropertiesSerializable.toPropertyList(requiredArray));
            return this;
        }

        /**
         * Required array (empty) property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredArrayEmpty(final @NonNull List<Object> requiredArrayEmpty) {
            properties.putValue(REQUIRED_ARRAY_EMPTY_KEY, PropertiesSerializable.toPropertyList(requiredArrayEmpty));
            return this;
        }

        /**
         * Required boolean property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredBoolean(final @NonNull Boolean requiredBoolean) {
            properties.putValue(REQUIRED_BOOLEAN_KEY, requiredBoolean);
            return this;
        }

        /**
         * Required integer property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredInt(final @NonNull Long requiredInt) {
            properties.putValue(REQUIRED_INT_KEY, requiredInt);
            return this;
        }

        /**
         * Required number property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredNumber(final @NonNull Double requiredNumber) {
            properties.putValue(REQUIRED_NUMBER_KEY, requiredNumber);
            return this;
        }

        /**
         * Required object property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredObject(final @NonNull RequiredObject requiredObject) {
            properties.putValue(REQUIRED_OBJECT_KEY, requiredObject);
            return this;
        }

        /**
         * Required object (empty) property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredObjectEmpty(final @NonNull Map<String, Object> requiredObjectEmpty) {
            properties.putValue(REQUIRED_OBJECT_EMPTY_KEY, requiredObjectEmpty);
            return this;
        }

        /**
         * Required string property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredString(final @NonNull String requiredString) {
            properties.putValue(REQUIRED_STRING_KEY, requiredString);
            return this;
        }

        /**
         * Required string regex property
         * This property is required to generate a valid ExampleEvent object
         */
        public Builder requiredStringRegex(final @NonNull String requiredStringRegex) {
            properties.putValue(REQUIRED_STRING_REGEX_KEY, requiredStringRegex);
            return this;
        }

        /**
         * Build an instance of {@link ExampleEvent}
         * Performs runtime validation on the following required properties:
         *  - requiredAny
         *  - requiredArray
         *  - requiredArrayEmpty
         *  - requiredBoolean
         *  - requiredInt
         *  - requiredNumber
         *  - requiredObject
         *  - requiredObjectEmpty
         *  - requiredString
         *  - requiredStringRegex
         */
        public ExampleEvent build() {
            if (properties.get(REQUIRED_ANY_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredAny");
            }

            if (properties.get(REQUIRED_ARRAY_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredArray");
            }

            if (properties.get(REQUIRED_ARRAY_EMPTY_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredArrayEmpty");
            }

            if (properties.get(REQUIRED_BOOLEAN_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredBoolean");
            }

            if (properties.get(REQUIRED_INT_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredInt");
            }

            if (properties.get(REQUIRED_NUMBER_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredNumber");
            }

            if (properties.get(REQUIRED_OBJECT_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredObject");
            }

            if (properties.get(REQUIRED_OBJECT_EMPTY_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredObjectEmpty");
            }

            if (properties.get(REQUIRED_STRING_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredString");
            }

            if (properties.get(REQUIRED_STRING_REGEX_KEY) == null) {
                throw new IllegalArgumentException("ExampleEvent missing required property: requiredStringRegex");
            }

            return new ExampleEvent(properties);
        }
    }
}
