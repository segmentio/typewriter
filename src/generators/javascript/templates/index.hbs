/**
 * {{autogeneratedFileWarning}}
 */

{{#if isDevelopment}}
/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 * 
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv'
{{/if}}
import * as Segment from './segment'

{{#each objects}}
{{#if description}}
/**
 * {{description}}
 */
{{/if}}
export interface {{name}} {
	{{#each properties}}
	{{#if description}}
	/**
	 * {{description}}
	 */
	{{/if}}
	'{{name}}'{{#unless isRequired}}?{{/unless}}: {{type}}
	{{/each}}
}
{{/each}}

export type ViolationHandler = (
	message: {{#if isBrowser}}Record<string, any>{{else}}Segment.TrackMessage<Record<string, any>>{{/if}},
	{{!-- Swap the type definitions here so we don't want depend on ajv in production just for this type definition. --}}
	violations: {{#if isDevelopment}}Ajv.ErrorObject{{else}}any{{/if}}[]
) => void

/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 {{#if isBrowser}}
 * This handler will log a warning message to the console.
 {{else}}
 * If NODE_ENV="test", this handler will throw an error. Otherwise, it will log
 * a warning message to the console.
 {{/if}}
 */
export const defaultValidationErrorHandler: ViolationHandler = (message, violations) => {
	const msg = JSON.stringify({
		type: 'Typewriter JSON Schema Validation Error',
		description:
			`You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
			'Tracking Plan spec.',
		errors: violations,
	}, undefined, 2)

	{{#unless isBrowser}}
	if (process.env.NODE_ENV === 'test') {
		throw new Error(msg)
	}
	{{/unless}}
	console.warn(msg)
}

{{#if isDevelopment}}
let onViolation = defaultValidationErrorHandler
{{/if}}

{{#unless isBrowser}}
const missingAnalyticsNodeError = new Error(`You must set an analytics-node instance:

>	const SegmentAnalytics = require('analytics-node')
>	const { setTypewriterOptions } = require('./analytics')
>
>	const analytics = new SegmentAnalytics('SEGMENT_WRITE_KEY')
>	setTypewriterOptions({
>		analytics: analytics,
>	})

For more information on analytics-node, see: https://segment.com/docs/sources/server/node/quickstart/
`)
{{/unless}}

{{!-- We use a closure so we can lazy-resolve window.analytics in browser environments. --}}
let analytics: () => ({{#if isBrowser}}SegmentAnalytics.AnalyticsJS{{else}}Segment.AnalyticsNode{{/if}} | undefined) = () => {
	{{#if isBrowser}}
	return window.analytics
	{{else}}
	throw missingAnalyticsNodeError
	{{/if}}
}

/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
	/**
	 * Underlying analytics instance where analytics calls are forwarded on to.
	 {{#if isBrowser}}
	 * Defaults to window.analytics.
	 {{/if}}
	 */
	analytics{{#if isBrowser}}?{{/if}}: {{#if isBrowser}}SegmentAnalytics.AnalyticsJS{{else}}Segment.AnalyticsNode{{/if}}
	/**
	 * Handler fired when if an event does not match its spec. This handler
	 * does not fire in production mode, because it requires inlining the full
	 * JSON Schema spec for each event in your Tracking Plan.
	 *
	 * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
	 * if a message does not match the spec. Otherwise, errors will be logged to stderr.
	 */
	onViolation?: ViolationHandler
}

{{> setTypewriterOptionsDocumentation}}
export function setTypewriterOptions(options: TypewriterOptions) {
	analytics = options.analytics ? () => options.analytics{{#if isBrowser}} || window.analytics{{/if}} : analytics
	{{#if isDevelopment}}
	onViolation = options.onViolation || onViolation
	{{/if}}
}

{{#if isDevelopment}}
/**
	* Validates a message against a JSON Schema using Ajv. If the message
	* is invalid, the `onViolation` handler will be called.
	*/
function validateAgainstSchema(
	message: {{#if isBrowser}}Record<string, any>{{else}}Segment.TrackMessage<Record<string, any>>{{/if}},
	schema: object
) {
	const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true })
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'))
	ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'))

	if (!ajv.validate(schema, message) && ajv.errors) {
		onViolation(message, ajv.errors)
	}
}
{{/if}}

/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext{{#unless isBrowser}}<P, T extends Segment.TrackMessage<P>>{{/unless}}(message: {{#if isBrowser}}Segment.Options = {}{{else}}T{{/if}}): {{#if isBrowser}}Segment.Options{{else}}T{{/if}} {
	return {
		...message,
		context: {
			...(message.context || {}),
			typewriter: {
				language: '{{language}}',
				version: '{{typewriterVersion}}',
			},
		},
	}
}

{{#unless isBrowser}}
/**
 * A message payload for an analytics-node `.track()` call.
 * See: https://segment.com/docs/spec/track/
 *
 * @typedef TrackMessage<PropertiesType>
 * @property {string | number} [userId] - The ID for this user in your database.
 * @property {string | number} [anonymousId] - An ID to associated with the user when you don’t know who they are.
 * @property {PropertiesType} [properties] - A dictionary of properties for the event.
 * @property {Date} [timestamp] - A Javascript date object representing when the track took place. If the track
 * 		just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past make
 * 		sure you to send a timestamp.
 * @template PropertiesType
 */
{{/unless}}

{{#each objects}}
/**
 {{#if description}}
 * {{description}}
 {{/if}}
 * @typedef {{name}}
 {{#each properties}}
	{{!-- Note: this uses whitespace control to "escape" the outer curly braces. --}}
	{{!-- Note: The backticks enable JSDoc to parse names with spaces (without resorting to square brackets). --}}
	{{!-- Temporary removed backticks around required names below because of typescript compiler + JSDoc error. Will investigate. --}}
 * @property { {{~type~}} } {{#if isRequired}}{{name}}{{else}}[{{name}}]{{/if}} - {{description}}
 {{/each}}
 */
{{/each}}

{{#each tracks}}
{{> functionDocumentation isBrowser=../isBrowser }}
{{#if ../isBrowser}}
export function {{functionName}}(
	props{{#if isPropertiesOptional}}?{{/if}}: {{propertiesType}},
	options?: Segment.Options,
	callback?: Segment.Callback
): void {
	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}
	const message = {
		event: '{{rawEventName}}',
		properties: props || {},
		options,
	}
	validateAgainstSchema(message, schema)
	{{/if}}

	const a = analytics()
	if (a) {
		a.track(
			'{{rawEventName}}',
			props || {},
			withTypewriterContext(options),
			callback
		)
	}
}
{{else}}
export function {{functionName}}(
	message: Segment.TrackMessage<{{propertiesType}}>,
	callback?: Segment.Callback
): void {
	const msg = withTypewriterContext({
		properties: {},
		...message,
		event: '{{rawEventName}}'
	})

	{{#if ../isDevelopment}}
	const schema = {{rawJSONSchema}}	
	validateAgainstSchema(msg, schema)
	{{/if}}

	const a = analytics()
	if (a) {
		a.track(msg, callback)
	} else {
		throw missingAnalyticsNodeError
	}
}
{{/if}}
{{/each}}

{{#if useProxy}}
const clientAPI = {
	{{> setTypewriterOptionsDocumentation}}
	setTypewriterOptions,
	{{#each tracks}}
	{{> functionDocumentation isBrowser=../isBrowser }}
	{{functionName}},
	{{/each}}
}

export default new Proxy<typeof clientAPI>(clientAPI, {
	get(target, method) {
		if (typeof method === 'string' && target.hasOwnProperty(method)) {
			return target[method as keyof typeof clientAPI]
		}

		return () => {
			console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
    a) Re-generate your typewriter client: \`npx typewriter\`
    b) Add it to your Tracking Plan: {{trackingPlanURL}}`)
			const a = analytics()
			if (a) {
				{{#if isBrowser}}
				a.track('Unknown Analytics Call Fired',
					{
						method,
					},
					withTypewriterContext()
				)
				{{else}}
				a.track(withTypewriterContext({
					event: 'Unknown Analytics Call Fired',
					properties: {
						method,
					},
					userId: 'typewriter'
				}))
				{{/if}}
			}
		}
	}
})
{{/if}}
